<p>â€¦why not!</p>
<p>Shortly before <a href="https://fosdem.org">FOSDEM</a>, <a href="http://www.proli.net/">AleixÂ Pol</a> asked if I had ever put Plasma in a Snap. While I was a bit perplexed by the notion itself,Â I also found this a rather interesting idea.</p>
<p>So, the past couple of weeks I spent a bit of time here and there on trying to see if it is possible.</p>
<p><img alt="img_20170220_154814" class="aligncenter size-large wp-image-1648" data-attachment-id="1648" data-comments-opened="0" data-image-description="" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="img_20170220_154814" data-large-file="https://apachelog.files.wordpress.com/2017/02/img_20170220_154814.jpg?w=615&amp;h=461" data-medium-file="https://apachelog.files.wordpress.com/2017/02/img_20170220_154814.jpg?w=300" data-orig-file="https://apachelog.files.wordpress.com/2017/02/img_20170220_154814.jpg" data-orig-size="3264,2448" data-permalink="https://apachelog.wordpress.com/2017/02/21/plasma-in-a-snap/img_20170220_154814/#main" height="461" src="https://apachelog.files.wordpress.com/2017/02/img_20170220_154814.jpg?w=615&amp;h=461" width="615" /></p>
<p>It is!</p>
<p>But letâ€™s start in the beginning. <a href="https://snapcraft.io/">Snap</a> is one of the Linux bundle formats that are currently very much en-vogue. Basically, whatever is necessary to run an application is put into a self-contained archive from which the application then gets run. The motivation is to isolate application building and delivery from the operating system building and delivery. Or in short, you do not depend on your Linux distributionÂ to provide a package, as long as the distribution can run the middleware for the specific bundle format you can get a bundle from the source author and it will run. As an added bonusÂ these bundles usually also get confined. That means that whatever is inside canâ€™t access system files or other programs unless permission for this was given in some form or fashion.</p>
<p>Putting <a href="https://www.kde.org/plasma-desktop">Plasma</a>, KDEâ€™s award-winning desktop workspace, in a snap is interesting for all the same reasons it is interesting for applications. Distributing binary builds would be less of a hassle, testing is more accessible and confinement inÂ various ways can lessen the impact of security issues in the confined software.</p>
<p>With the snap format specifically Plasma has two challenges:</p>
<ol>
<li>The snapped software is mounted in a changing path that is different from the installation directory.</li>
<li>Confining Plasma is a bit tricky because of how many actors are involved in a Plasma session and some of them needing far-reaching access to system services.</li>
</ol>
<p>As it turns out problem 1, in particular, is biting Plasma fairly hard. Not exactly a great surprise, after all, relocating (i.e. changing paths of) an installed Plasma isnâ€™t exactly something weâ€™ve done in the past. In fact, it goes further than that as ultimately Plasmaâ€™s dependencies need to be relocatable as well, which for example Xwayland is not.</p>
<p>But letâ€™s talk about the snapping itself first. For the purposes of this proof of concept, I simply recycled <a href="https://neon.kde.org">KDE neon</a>â€˜s deb builds. Snapcraft, the build tool for snaps, has built-in support for installing debs into a snap, so that is a great timesaver to get things off the ground as it were. Additionally, I used the Plasma Wayland stack instead of the X11 stack. Confinement makes lots more sense with Wayland compared to X11.</p>
<h1>Relocatability</h1>
<p>Relocatability is a tricky topic. A lot of times one compiles fixed paths into the binary because it is easy to do and it is somewhat secure. Notably, depending on the specific environment at the time of invocation one could be tricked into executing a malicious binary in $PATH instead of the desired one. Explicitly specifying the path is a well-understood safeguard against this sort of problem. Unfortunately, it also means that you cannot move your installed tree anywhere but where it was installed. The relocatable and safe solution is slightly more involved in terms of code as you need to resolve what you want to invoke relative from your location, it being more code and also not exactly trivial to get right is why often times one opts to simply hard-compile paths. This is a problem in terms of packing things into a relocatable snap though. I had to apply a whole bunch of hacks to either resolve binaries from PATH or resolve their location relative. None of these are particularly useful patches but <a href="https://github.com/apachelogger/plasma-snap/tree/master/patches">here ya go</a>.</p>
<h1>Session</h1>
<p>Once all relocatability issues were out of the way I finally had an actual Plasma session. Weeeh!</p>
<h1>Confinement</h1>
<p>Confining Plasma as a whole is fairly straightforward, albeit a bit of a drag since itâ€™s basically a matter of figuring out what is or isnâ€™t required to make things fly. A lot of logouts and logins is what it takes. Fortunately, snaps have a built-in mechanism to expose DBus session services offered by them. A full blown Plasma session has an enormous amount of services it offers on DBus, from the general purpose notification service to the special interest Plasma Activity service. Being able to expose them efficiently is a great help in tweaking confinement.</p>
<p>Not everything is about DBus though! Sometimes a snap needs to talk with a system service, and obviously, a workspace as powerful as Plasma would need to talk to a bunch of them. Doing advanced access control needs to be done in snapd (the thing that manages installed snaps). <a href="http://www.zygoon.pl/2016/08/creating-your-first-snappy-interface.html">Snapdâ€™s interfaces</a> control what is and is not allowed for a snap. To get Plasma to start and work with confinement a bunch of holes need to be poked in the confinement that are outside the scope of existing interface. KWin, in particular, is taking the role of a fairly central service in the Plasma Wayland world, so it needs far-reaching access so it can do its job. Unfortunately, interfaces currently can only be built with snapdâ€™s source tree itself. I made an <a href="https://github.com/apachelogger/plasma-snap/blob/master/interface/plasma.go#L40">example interface</a> which covers most of the relevant core services but unless you build a snapd this wonâ€™t be particularly easy to try <img alt="ðŸ˜‰" class="wp-smiley" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png" style="height: 1em;" /></p>
<h1>Summary</h1>
<p>All in all, Plasma is easily bundled up once one gets relocatability problems out of the way. And thanks to the confinement control snap and snapd offer, it is also perfectly possible to restrict the workspace through confinement.</p>
<p>I did not at all touch on integration issues however. Running the workspace from a confined bundle is all nice and dandy but not very useful since Plasma wonâ€™t have any applications it can launch as they either live on the system or in other snaps. A confined Plasma would know about neither right now.</p>
<p>There is also the lingering question of whether confining like this makes sense at all. Putting all of Plasma into the same snap means this one snap will need lots of permissions and interaction with the host system. At the same time it also means that keeping confinement profiles up to date would be a continuous feat as there are so many things offered and used by this one snap.</p>
<p>One day perhaps weâ€™ll see this in production quality. Certainly not today <img alt="ðŸ™‚" class="wp-smiley" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png" style="height: 1em;" /></p>
<p><a href="https://www.kde.org/donations"><img alt="mascot_konqi-app-dev" class="aligncenter wp-image-1676 size-medium" data-attachment-id="1676" data-comments-opened="0" data-image-description="" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="mascot_konqi-app-dev" data-large-file="https://apachelog.files.wordpress.com/2017/02/mascot_konqi-app-dev.png?w=615" data-medium-file="https://apachelog.files.wordpress.com/2017/02/mascot_konqi-app-dev.png?w=300&amp;h=276" data-orig-file="https://apachelog.files.wordpress.com/2017/02/mascot_konqi-app-dev.png" data-orig-size="3812,3508" data-permalink="https://apachelog.wordpress.com/2017/02/21/plasma-in-a-snap/mascot_konqi-app-dev/#main" height="276" src="https://apachelog.files.wordpress.com/2017/02/mascot_konqi-app-dev.png?w=300&amp;h=276" width="300" /></a></p><img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=apachelog.wordpress.com&amp;blog=12425881&amp;post=1645&amp;subd=apachelog&amp;ref=&amp;feed=1" width="1" />