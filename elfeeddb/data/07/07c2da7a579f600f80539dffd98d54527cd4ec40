<p>Not everything written in Emacs Lisp needs to be fast. Most of Emacs
itself — around 82% — is written in Emacs Lisp <em>because</em> those parts
are generally not performance-critical. Otherwise these functions
would be built-ins written in C. Extensions to Emacs don’t have a
choice and — outside of a few exceptions like <a href="http://nullprogram.com/blog/2016/11/05/">dynamic modules</a>
and inferior processes — must be written in Emacs Lisp, including
their performance-critical bits. Common performance hot spots are
automatic indentation, <a href="https://github.com/mooz/js2-mode">AST parsing</a>, and <a href="http://nullprogram.com/blog/2016/12/11/">interactive
completion</a>.</p>

<p>Here are 5 guidelines, each very specific to Emacs Lisp, that will
result in faster code. The non-intrusive guidelines could be applied
at all times as a matter of style — choosing one equally expressive
and maintainable form over another just because it performs better.</p>

<p>There’s one caveat: These guidelines are focused on Emacs 25.1 and
“nearby” versions. Emacs is constantly evolving. Changes to the
<a href="http://nullprogram.com/blog/2014/01/04/">virtual machine</a> and byte-code compiler may transform
currently-slow expressions into fast code, obsoleting some of these
guidelines. In the future I’ll add notes to this article for anything
that changes.</p>

<h3 id="1-use-lexical-scope">(1) Use lexical scope</h3>

<p>This guideline refers to the following being the first line of every
Emacs Lisp source file you write:</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="c1">;;; -*- lexical-binding: t; -*-</span>
</code></pre>
</div>

<p>This point is worth mentioning again and again. Not only will <a href="http://nullprogram.com/blog/2016/12/22/">your
code be more correct</a>, it will be measurably faster. Dynamic
scope is still opt-in through the explicit use of <em>special variables</em>,
so there’s absolutely no reason not to be using lexical scope. If
you’ve written clean, dynamic scope code, then switching to lexical
scope won’t have any effect on its behavior.</p>

<p>Along similar lines, special variables are a lot slower than local,
lexical variables. Only use them when necessary.</p>

<h3 id="2-prefer-built-in-functions">(2) Prefer built-in functions</h3>

<p>Built-in functions are written in C and are, as expected,
significantly faster than the equivalent written in Emacs Lisp.
Complete as much work as possible inside built-in functions, even if
it might mean taking more conceptual steps overall.</p>

<p>For example, what’s the fastest way to accumulate a list of items?
That is, new items go on the tail but, for algorithm reasons, the list
must be constructed from the head.</p>

<p>You might be tempted to keep track of the tail of the list, appending
new elements directly to the tail with <code class="highlighter-rouge">setcdr</code> (via <code class="highlighter-rouge">setf</code> below).</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">fib-track-tail</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">a</span> <span class="mi">0</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">b</span> <span class="mi">1</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">head</span> <span class="p">(</span><span class="nb">list</span> <span class="mi">1</span><span class="p">))</span>
         <span class="p">(</span><span class="nv">tail</span> <span class="nv">head</span><span class="p">))</span>
    <span class="p">(</span><span class="nb">dotimes</span> <span class="p">(</span><span class="nv">_</span> <span class="nv">n</span> <span class="nv">head</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">psetf</span> <span class="nv">a</span> <span class="nv">b</span>
             <span class="nv">b</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">tail</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">b</span><span class="p">)</span>
            <span class="nv">tail</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">tail</span><span class="p">)))))</span>

<span class="p">(</span><span class="nv">fib-track-tail</span> <span class="mi">8</span><span class="p">)</span>
<span class="c1">;; =&gt; (1 1 2 3 5 8 13 21 34)</span>
</code></pre>
</div>

<p>Actually, it’s much faster to construct the list in reverse, then
destructively reverse it at the end.</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">fib-nreverse</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">a</span> <span class="mi">0</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">b</span> <span class="mi">1</span><span class="p">)</span>
         <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">list</span> <span class="mi">1</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">dotimes</span> <span class="p">(</span><span class="nv">_</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">nreverse</span> <span class="nb">list</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">psetf</span> <span class="nv">a</span> <span class="nv">b</span>
             <span class="nv">b</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">push</span> <span class="nv">b</span> <span class="nb">list</span><span class="p">))))</span>
</code></pre>
</div>

<p>It might not look it, but <code class="highlighter-rouge">nreverse</code> is <em>very</em> fast. Not only is it a
built-in, it’s got its own opcode. Using <code class="highlighter-rouge">push</code> in a loop, then
finishing with <code class="highlighter-rouge">nreverse</code> is the canonical and fastest way to
accumulate a list of items.</p>

<p>In <code class="highlighter-rouge">fib-track-tail</code>, the added complexity of tracking the tail in
Emacs Lisp is much slower than zipping over the entire list a second
time in C.</p>

<h3 id="3-avoid-unnecessary-lambda-functions">(3) Avoid unnecessary lambda functions</h3>

<p>I’m talking about <code class="highlighter-rouge">mapcar</code> and friends.</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="c1">;; Slower</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">expt-list</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">e</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">mapcar</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">expt</span> <span class="nv">x</span> <span class="nv">e</span><span class="p">))</span> <span class="nb">list</span><span class="p">))</span>
</code></pre>
</div>

<p>Listen, I know you love <a href="https://github.com/magnars/dash.el">dash.el</a> and higher order functions,
but <em>this habit ain’t cheap</em>. The byte-code compiler does not know how
to inline these lambdas, so there’s an additional per-element function
call overhead.</p>

<p>Worse, if you’re using lexical scope like I told you, the above
example forms a <em>closure</em> over <code class="highlighter-rouge">e</code>. This means a new function object
is created (e.g. <code class="highlighter-rouge">make-byte-code</code>) each time <code class="highlighter-rouge">expt-list</code> is called. To
be clear, I don’t mean that the lambda is recompiled each time — the
same byte-code string is shared between all instances of the same
lambda. A unique function vector (<code class="highlighter-rouge">#[...]</code>) and constants vector are
allocated and initialized each time <code class="highlighter-rouge">expt-list</code> is invoked.</p>

<p>Related mini-guideline: Don’t create any more garbage than strictly
necessary in performance-critical code.</p>

<p>Compare to an implementation with an explicit loop, using the
<code class="highlighter-rouge">nreverse</code> list-accumulation technique.</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">expt-list-fast</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">e</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">result</span> <span class="p">()))</span>
    <span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">x</span> <span class="nb">list</span> <span class="p">(</span><span class="nb">nreverse</span> <span class="nv">result</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">push</span> <span class="p">(</span><span class="nb">expt</span> <span class="nv">x</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">result</span><span class="p">))))</span>
</code></pre>
</div>

<ul>
  <li>No unnecessary garbage is created.</li>
  <li>No unnecessary per-element function calls.</li>
</ul>

<p>This is the fastest possible definition for this function, and it’s
what you need to use in performance-critical code.</p>

<p>Personally I prefer the list comprehension approach, using <code class="highlighter-rouge">cl-loop</code>
from <code class="highlighter-rouge">cl-lib</code>.</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">expt-list-fast</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">e</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">cl-loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">in</span> <span class="nb">list</span>
           <span class="nv">collect</span> <span class="p">(</span><span class="nb">expt</span> <span class="nv">x</span> <span class="nv">e</span><span class="p">)))</span>
</code></pre>
</div>

<p>The <code class="highlighter-rouge">cl-loop</code> macro will expand into essentially the previous
definition, making them practically equivalent. It takes some getting
used to, but writing efficient loops is a whole lot less tedious with
<code class="highlighter-rouge">cl-loop</code>.</p>

<p>In Emacs 24.4 and earlier, <code class="highlighter-rouge">catch</code>/<code class="highlighter-rouge">throw</code> is implemented by
converting the body of the <code class="highlighter-rouge">catch</code> into a lambda function and calling
it. If code inside the <code class="highlighter-rouge">catch</code> accesses a variable outside the <code class="highlighter-rouge">catch</code>
(very likely), then, in lexical scope, it turns into a closure,
resulting in the garbage function object like before.</p>

<p>In Emacs 24.5 and later, the byte-code compiler uses a new opcode,
<code class="highlighter-rouge">pushcatch</code>. It’s a whole lot more efficient, and there’s no longer a
reason to shy away from <code class="highlighter-rouge">catch</code>/<code class="highlighter-rouge">throw</code> in performance-critical code.
This is important because it’s often the only way to perform an early
bailout.</p>

<h3 id="4-prefer-using-functions-with-dedicated-opcodes">(4) Prefer using functions with dedicated opcodes</h3>

<p>When following the guideline about using built-in functions, you might
have several to pick from. Some built-in functions have dedicated
virtual machine opcodes, making them much faster to invoke. Prefer
these functions when possible.</p>

<p>How can you tell when a function has an assigned opcode? Take a peek
at the <code class="highlighter-rouge">byte-defop</code> listings in <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/bytecomp.el">bytecomp.el</a>. Optimization often
involves getting into the weeds, so don’t be shy.</p>

<p>For example, the <code class="highlighter-rouge">assq</code> and <code class="highlighter-rouge">assoc</code> functions search for a matching
key in an association list (alist). Both are built-in functions, and
the only difference is that the former compares keys with <code class="highlighter-rouge">eq</code> (e.g.
symbol or integer keys) and the latter with <code class="highlighter-rouge">equal</code> (typically string
keys). The difference in performance between <code class="highlighter-rouge">eq</code> and <code class="highlighter-rouge">equal</code> isn’t as
important as another factor: <code class="highlighter-rouge">assq</code> has its own opcode (158).</p>

<p>This means in performance-critical code you should prefer <code class="highlighter-rouge">assq</code>,
perhaps even going as far as restructuring your alists specifically to
have <code class="highlighter-rouge">eq</code> keys. That last step is probably a trade-off, which means
you’ll want to make some benchmarks to help with that decision.</p>

<p>Another example is <code class="highlighter-rouge">eq</code>, <code class="highlighter-rouge">=</code>, <code class="highlighter-rouge">eql</code>, and <code class="highlighter-rouge">equal</code>. Some macros and
functions use <code class="highlighter-rouge">eql</code>, especially <code class="highlighter-rouge">cl-lib</code> which inherits <code class="highlighter-rouge">eql</code> as a
default from Common Lisp. Take <code class="highlighter-rouge">cl-case</code>, which is like <code class="highlighter-rouge">switch</code> from
the C family of languages. It compares elements with <code class="highlighter-rouge">eql</code>.</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">op-apply</span> <span class="p">(</span><span class="nv">op</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">cl-case</span> <span class="nv">op</span>
    <span class="p">(</span><span class="ss">:norm</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">a</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">b</span> <span class="nv">b</span><span class="p">)))</span>
    <span class="p">(</span><span class="ss">:disp</span> <span class="p">(</span><span class="nb">abs</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
    <span class="p">(</span><span class="ss">:isin</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">sin</span> <span class="nv">a</span><span class="p">)))))</span>
</code></pre>
</div>

<p>The <code class="highlighter-rouge">cl-case</code> expands into a <code class="highlighter-rouge">cond</code>. Since Emacs byte-code lacks
support for jump tables, there’s not much room for cleverness.</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">op-apply</span> <span class="p">(</span><span class="nv">op</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span>
   <span class="p">((</span><span class="nb">eql</span> <span class="nv">op</span> <span class="ss">:norm</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">a</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">b</span> <span class="nv">b</span><span class="p">)))</span>
   <span class="p">((</span><span class="nb">eql</span> <span class="nv">op</span> <span class="ss">:disp</span><span class="p">)</span> <span class="p">(</span><span class="nb">abs</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
   <span class="p">((</span><span class="nb">eql</span> <span class="nv">op</span> <span class="ss">:isin</span><span class="p">)</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">sin</span> <span class="nv">a</span><span class="p">)))))</span>
</code></pre>
</div>

<p>It turns out <code class="highlighter-rouge">eql</code> is pretty much always the worst choice for
<code class="highlighter-rouge">cl-case</code>. Of the four equality functions I listed, the only one
lacking an opcode is <code class="highlighter-rouge">eql</code>. A faster definition would use <code class="highlighter-rouge">eq</code>. (In
theory, <code class="highlighter-rouge">cl-case</code> <em>could</em> have done this itself because it knows all
the keys are symbols.)</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">op-apply</span> <span class="p">(</span><span class="nv">op</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span>
   <span class="p">((</span><span class="nb">eq</span> <span class="nv">op</span> <span class="ss">:norm</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">a</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">b</span> <span class="nv">b</span><span class="p">)))</span>
   <span class="p">((</span><span class="nb">eq</span> <span class="nv">op</span> <span class="ss">:disp</span><span class="p">)</span> <span class="p">(</span><span class="nb">abs</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
   <span class="p">((</span><span class="nb">eq</span> <span class="nv">op</span> <span class="ss">:isin</span><span class="p">)</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">sin</span> <span class="nv">a</span><span class="p">)))))</span>
</code></pre>
</div>

<p>Fortunately <code class="highlighter-rouge">eq</code> can safely compare integers in Emacs Lisp. You only
need <code class="highlighter-rouge">eql</code> when comparing symbols, integers, and floats all at once,
which is unusual.</p>

<h3 id="5-unroll-loops-using-andor">(5) Unroll loops using and/or</h3>

<p>Consider the following function which checks its argument against a
list of numbers, bailing out on the first match. I used <code class="highlighter-rouge">%</code> instead of
<code class="highlighter-rouge">mod</code> since the former has an opcode (166) and the latter does not.</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">detect</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="k">catch</span> <span class="ss">'found</span>
    <span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">f</span> <span class="o">'</span><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">13</span> <span class="mi">17</span> <span class="mi">19</span> <span class="mi">23</span> <span class="mi">29</span> <span class="mi">31</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="nv">f</span><span class="p">))</span>
        <span class="p">(</span><span class="k">throw</span> <span class="ss">'found</span> <span class="nv">f</span><span class="p">)))))</span>
</code></pre>
</div>

<p>The byte-code compiler doesn’t know how to unroll loops. Fortunately
that’s something we can do for ourselves using <code class="highlighter-rouge">and</code> and <code class="highlighter-rouge">or</code>. The
compiler will turn this into clean, efficient jumps in the byte-code.</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">detect-unrolled</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">2</span><span class="p">))</span> <span class="mi">2</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">3</span><span class="p">))</span> <span class="mi">3</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">5</span><span class="p">))</span> <span class="mi">5</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">7</span><span class="p">))</span> <span class="mi">7</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">11</span><span class="p">))</span> <span class="mi">11</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">13</span><span class="p">))</span> <span class="mi">13</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">17</span><span class="p">))</span> <span class="mi">17</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">19</span><span class="p">))</span> <span class="mi">19</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">23</span><span class="p">))</span> <span class="mi">23</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">29</span><span class="p">))</span> <span class="mi">29</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="nv">x</span> <span class="mi">31</span><span class="p">))</span> <span class="mi">31</span><span class="p">)))</span>
</code></pre>
</div>

<p>In Emacs 24.4 and earlier with the old-fashioned lambda-based <code class="highlighter-rouge">catch</code>,
the unrolled definition is seven times faster. With the faster
<code class="highlighter-rouge">pushcatch</code>-based <code class="highlighter-rouge">catch</code> it’s about twice as fast. This means the
loop overhead accounts for about half the work of the first definition
of this function.</p>

<p>Update: It was pointed out in the comments that this particular
example is equivalent to a <code class="highlighter-rouge">cond</code>. That’s literally true all the way
down to the byte-code, and it would be a clearer way to express the
unrolled code. In real code it’s often not <em>quite</em> equivalent.</p>

<p>Unlike some of the other guidelines, this is certainly something you’d
only want to do in code you know for sure is performance-critical.
Maintaining unrolled code is tedious and error-prone.</p>

<p>I’ve had the most success with this approach by not by unrolling these
loops myself, but by <a href="http://nullprogram.com/blog/2016/12/27/">using a macro</a>, or <a href="http://nullprogram.com/blog/2016/12/11/">similar</a>, to
generate the unrolled form.</p>

<div class="language-cl highlighter-rouge"><pre class="highlight"><code><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">with-detect</span> <span class="p">(</span><span class="nv">var</span> <span class="nb">list</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">cl-loop</span> <span class="nv">for</span> <span class="nv">e</span> <span class="nv">in</span> <span class="nb">list</span>
           <span class="nv">collect</span> <span class="o">`</span><span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">=</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">%</span> <span class="o">,</span><span class="nv">var</span> <span class="o">,</span><span class="nv">e</span><span class="p">))</span> <span class="o">,</span><span class="nv">e</span><span class="p">)</span> <span class="nv">into</span> <span class="nv">conditions</span>
           <span class="nv">finally</span> <span class="nb">return</span> <span class="o">`</span><span class="p">(</span><span class="nb">or</span> <span class="o">,@</span><span class="nv">conditions</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">detect-unrolled</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">with-detect</span> <span class="nv">x</span> <span class="p">(</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">7</span> <span class="mi">11</span> <span class="mi">13</span> <span class="mi">17</span> <span class="mi">19</span> <span class="mi">23</span> <span class="mi">29</span> <span class="mi">31</span><span class="p">)))</span>
</code></pre>
</div>

<h3 id="how-can-i-find-more-optimization-opportunities-myself">How can I find more optimization opportunities myself?</h3>

<p>Use <code class="highlighter-rouge">M-x disassemble</code> to inspect the byte-code for your own hot spots.
Observe how the byte-code changes in response to changes in your
functions. Take note of the sorts of forms that allow the byte-code
compiler to produce the best code, and then exploit it where you can.</p>